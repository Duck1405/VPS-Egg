{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2024-10-09T18:55:11+02:00",
    "name": "VPS",
    "author": "rd105291@outlook.com",
    "description": "Read: Custom egg: Ask Duck for Questions",
    "features": null,
    "docker_images": {
        "quay.io\/rd105291\/custom0": "quay.io\/rd105291\/custom0"
    },
    "file_denylist": [],
    "startup": "bash \/run.sh",
    "config": {
        "files": "{\r\n    \"vps.config\": {\r\n        \"parser\": \"properties\",\r\n        \"find\": {\r\n            \"internalip\": \"{{server.build.default.ip}}\",\r\n            \"port\": \"{{server.build.default.port}}\",\r\n            \"port2\": \"{{server.build.env.port2}}\",\r\n            \"port3\": \"{{server.build.env.PORT3}}\",\r\n            \"port4\": \"{{server.build.env.port3}}\",\r\n            \"port5\": \"{{server.build.env.port5}}\",\r\n            \"port6\": \"{{server.build.env.port6}}\",\r\n            \"port7\": \"{{server.build.env.port7}}\",\r\n            \"port8\": \"{{server.build.env.port8}}\",\r\n            \"port9\": \"{{server.build.env.port9}}\",\r\n            \"port10\": \"{{server.build.env.port10}}\",\r\n            \"port11\": \"{{server.build.env.port11}}\",\r\n            \"port12\": \"{{server.build.env.port12}}\",\r\n            \"port13\": \"{{server.build.env.port13}}\",\r\n            \"port14\": \"{{server.build.env.port14}}\",\r\n            \"port15\": \"{{server.build.env.port15}}\",\r\n            \"port16\": \"{{server.build.env.port16}}\",\r\n            \"port17\": \"{{server.build.env.port17}}\",\r\n            \"port18\": \"{{server.build.env.port18}}\",\r\n            \"port19\": \"{{server.build.env.port19}}\",\r\n            \"port20\": \"{{server.build.env.port20}}\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": \"Starting\"\r\n}",
        "logs": "{}",
        "stop": "exit"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n\r\nPURPLE='\\033[0;35m'\r\nRED='\\033[0;31m'\r\nGREEN='\\033[0;32m'\r\nYELLOW='\\033[0;33m'\r\nNC='\\033[0m'\r\n\r\n#############################\r\n# Linux Installation #\r\n#############################\r\n\r\n# Define the root directory to \/home\/container.\r\n# We can only write in \/home\/container and \/tmp in the container.\r\nROOTFS_DIR=\/home\/container\r\n\r\nexport PATH=$PATH:~\/.local\/usr\/bin\r\n\r\nPROOT_VERSION=\"5.4.0\"\r\n\r\n# Detect the machine architecture.\r\nARCH=$(uname -m)\r\n\r\n# Check machine architecture to make sure it is supported.\r\n# If not, we exit with a non-zero status code.\r\nif [ \"$ARCH\" = \"x86_64\" ]; then\r\n    ARCH_ALT=amd64\r\n    elif [ \"$ARCH\" = \"aarch64\" ]; then\r\n    ARCH_ALT=arm64\r\n    elif [ \"$ARCH\" = \"riscv64\" ]; then\r\n    ARCH_ALT=riscv64\r\nelse\r\n    printf \"Unsupported CPU architecture: ${ARCH}\"\r\n    exit 1\r\nfi\r\n\r\n# Base mirror url\r\nBASE_URL=\"https:\/\/images.linuxcontainers.org\/images\"\r\n\r\n# Function to install a specific distro\r\ninstall() {\r\n    local distro_name=\"$1\"\r\n    local pretty_name=\"$2\"\r\n    local is_custom=\"$3\"\r\n\r\n    # Determine if it's a custom install  (Has more than one flavor for each version)\r\n    # e.g musl, glibc for voidlinux\r\n    if [[ \"$is_custom\" == \"true\" ]]; then\r\n        # Fetch the directory listing and extract the image names\r\n        image_names=$(curl -s \"$BASE_URL\/$distro_name\/current\/$ARCH_ALT\/\" | grep -oP '(?<=href=\")[^\/]+(?=\/\")' | grep -v '^\\.\\.$')\r\n    else\r\n        # Fetch the directory listing and extract the image names\r\n        image_names=$(curl -s \"$BASE_URL\/$distro_name\/\" | grep -oP '(?<=href=\")[^\/]+(?=\/\")' | grep -v '^\\.\\.$')\r\n    fi\r\n    # Convert the space-separated string into an array\r\n    set -- $image_names\r\n    image_names=(\"$@\")\r\n    \r\n    # Display the available versions\r\n    for i in \"${!image_names[@]}\"; do\r\n        echo \"* [$((i + 1))] ${pretty_name} (${image_names[i]})\"\r\n    done\r\n    \r\n    # Enter the the desired version\r\n    echo -e \"${YELLOW}Enter the desired version (1-${#image_names[@]}): ${NC}\"\r\n    read -p \"\" version\r\n    \r\n    # Validate the input\r\n    if [[ $version -lt 1 || $version -gt ${#image_names[@]} ]]; then\r\n        echo -e \"${RED}Invalid selection. Exiting.${NC}\"\r\n        exit 1\r\n    fi\r\n    \r\n    # Get the selected version\r\n    selected_version=${image_names[$((version - 1))]}\r\n    echo -e \"${GREEN}Installing $pretty_name (${selected_version})...${NC}\"\r\n    \r\n    # Determine if it's a custom install to check whether your architecture is supported and obtain the URL accordingly \r\n    if [[ \"$is_custom\" == \"true\" ]]; then\r\n        ARCH_URL=\"${BASE_URL}\/${distro_name}\/current\/\"\r\n        URL=\"$BASE_URL\/${distro_name}\/current\/$ARCH_ALT\/$selected_version\/\"\r\n    else\r\n        ARCH_URL=\"${BASE_URL}\/${distro_name}\/${selected_version}\/\"\r\n        URL=\"${BASE_URL}\/${distro_name}\/${selected_version}\/${ARCH_ALT}\/default\/\"\r\n    fi\r\n\r\n    # Check if the distro support $ARCH_ALT\r\n    if ! curl -s \"$ARCH_URL\" | grep -q \"$ARCH_ALT\"; then\r\n        echo -e \"${RED}Error: This distro doesn't support $ARCH_ALT. Exiting.${NC}\"\r\n        exit 1\r\n    fi\r\n\r\n    # Fetch the latest version of the root filesystem\r\n    LATEST_VERSION=$(curl -s \"$URL\" | grep -oP 'href=\"\\K[^\"]+\/' | sort -r | head -n 1)\r\n    \r\n    # Download and extract the root filesystem\r\n    mkdir -p \"$ROOTFS_DIR\"\r\n    curl -Ls \"${URL}${LATEST_VERSION}\/rootfs.tar.xz\" -o \"$ROOTFS_DIR\/rootfs.tar.xz\"\r\n    tar -xf \"$ROOTFS_DIR\/rootfs.tar.xz\" -C \"$ROOTFS_DIR\"\r\n    mkdir -p \"$ROOTFS_DIR\/home\/container\/\"\r\n}\r\n\r\n# Function to install a specific distro (custom) from a specific URL\r\ninstall_custom() {\r\n    local pretty_name=\"$1\" \r\n    local URL=\"$2\"   \r\n\r\n    # Download and extract the root filesystem\r\n    mkdir -p \"$ROOTFS_DIR\"\r\n\r\n    # Get rootfs file name from URL\r\n    FILE_NAME=$(basename \"${URL}\")\r\n    # Print to screen what's currently installing\r\n    echo -e \"${GREEN}Installing $pretty_name ...${NC}\"\r\n    # Download the rootfs image to $ROOTFS_DIR\r\n    curl -Ls \"${URL}\" -o \"$ROOTFS_DIR\/$FILE_NAME\" || exit 1\r\n    # Extract rootfs image to ROOTFS_DIR\r\n    tar -xf \"$ROOTFS_DIR\/$FILE_NAME\" -C \"$ROOTFS_DIR\"\r\n    # Create ROOTFS_DIR\/home\/container\/ dir\r\n    mkdir -p \"$ROOTFS_DIR\/home\/container\/\"\r\n\r\n    # Check whether the OS is installed, then delete the rootfs image file\r\n    if [ ! -e \"$ROOTFS_DIR\/.installed\" ]; then\r\n        rm $ROOTFS_DIR\/$FILE_NAME\r\n    fi\r\n}\r\n\r\n# Download & decompress the Linux root file system if not already installed.\r\nif [ ! -e \"$ROOTFS_DIR\/.installed\" ]; then\r\n    \r\n    # Clear the terminal\r\n    printf \"\\033c\"\r\n    \r\n    # Display the menu\r\n    echo -e \"${GREEN}\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e${NC}\"\r\n    echo -e \"${GREEN}\u2502                                                                                \u2502${NC}\"\r\n    echo -e \"${GREEN}\u2502                             Pterodactyl VPS EGG                                \u2502${NC}\"\r\n    echo -e \"${GREEN}\u2502                                                                                \u2502${NC}\"\r\n    echo -e \"${GREEN}\u2502                           ${RED}\u00a9 2021 - 2024 ${PURPLE}ysdragon${GREEN}                               \u2502${NC}\"\r\n    echo -e \"${GREEN}\u2502                                                                                \u2502${NC}\"\r\n    echo -e \"${GREEN}\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f${NC}\"\r\n    echo \"                                                                                               \"\r\n    echo -e \"${YELLOW}Please choose your favorite distro                                               ${NC}\"\r\n    echo \"                                                                                               \"\r\n    echo \"* [1] Debian                                                                                   \"\r\n    echo \"* [2] Ubuntu                                                                                   \"\r\n    echo \"* [3] Void Linux                                                                               \"\r\n    echo \"* [4] Alpine Linux                                                                             \"\r\n    echo \"* [5] CentOS                                                                                   \"\r\n    echo \"* [6] Rocky Linux                                                                              \"\r\n    echo \"* [7] Fedora                                                                                   \"\r\n    echo \"* [8] AlmaLinux                                                                                \"\r\n    echo \"* [9] Slackware Linux                                                                          \"\r\n    echo \"* [10] Kali Linux                                                                              \"\r\n    echo \"* [11] openSUSE                                                                                \"\r\n    echo \"* [12] Gentoo Linux                                                                            \"\r\n    echo \"* [13] Arch Linux                                                                              \"\r\n    echo \"* [14] Devuan Linux                                                                            \"\r\n    echo \"                                                                                               \"\r\n    echo -e \"${YELLOW}Enter OS (1-14):                                                                 ${NC}\"\r\n    \r\n    read -p \"\" input\r\n    \r\n    case $input in\r\n        \r\n        1)\r\n            install             \"debian\"        \"Debian\"\r\n        ;;\r\n        \r\n        2)\r\n            install             \"ubuntu\"        \"Ubuntu\"\r\n        ;;\r\n        \r\n        3)\r\n            install             \"voidlinux\"     \"Void Linux\"         \"true\"\r\n        ;;\r\n        \r\n        4)\r\n            install             \"alpine\"        \"Alpine Linux\"\r\n        ;;\r\n        \r\n        5)\r\n            install             \"centos\"        \"CentOS\"\r\n        ;;\r\n        \r\n        6)\r\n            install             \"rockylinux\"    \"Rocky Linux\"\r\n        ;;\r\n        \r\n        7)\r\n            install             \"fedora\"        \"Fedora\"\r\n        ;;\r\n        \r\n        8)\r\n            install             \"almalinux\"     \"Alma Linux\"\r\n        ;;\r\n        \r\n        9)\r\n            install             \"slackware\"     \"Slackware\"\r\n        ;;\r\n        \r\n        \r\n        10)\r\n            install             \"kali\"          \"Kali Linux\"\r\n        ;;\r\n        \r\n        11)\r\n            install             \"opensuse\"      \"openSUSE\"\r\n        ;;\r\n        \r\n        12)\r\n            install             \"gentoo\"        \"Gentoo Linux\"         \"true\"\r\n        ;;\r\n        \r\n        13)\r\n            install             \"archlinux\"     \"Arch Linux\"\r\n            \r\n            # Fix pacman\r\n            sed -i '\/^#RootDir\/s\/^#\/\/' \"$ROOTFS_DIR\/etc\/pacman.conf\"\r\n            sed -i 's|\/var\/lib\/pacman\/|\/var\/lib\/pacman|' \"$ROOTFS_DIR\/etc\/pacman.conf\"\r\n            sed -i '\/^#DBPath\/s\/^#\/\/' \"$ROOTFS_DIR\/etc\/pacman.conf\"\r\n        ;;\r\n        \r\n        14)\r\n            install             \"devuan\"        \"Devuan Linux\"\r\n        ;;\r\n\r\n        ## An example of the usage of the install_custom function\r\n        # 15)\r\n        #     install_custom      \"Debian\"        \"https:\/\/github.com\/JuliaCI\/rootfs-images\/releases\/download\/v7.10\/debian_minimal.aarch64.tar.gz\"\r\n        # ;;\r\n\r\n        *)\r\n            echo -e \"${RED}Invalid selection. Exiting.${NC}\"\r\n            exit 1\r\n        ;;\r\n    esac\r\nfi\r\n\r\n################################\r\n# Package Installation & Setup #\r\n#################################\r\n\r\n# Download static proot.\r\nif [ ! -e \"$ROOTFS_DIR\/.installed\" ]; then\r\n    # Create \"$ROOTFS_DIR\/usr\/local\/bin\" dir\r\n    mkdir -p \"$ROOTFS_DIR\/usr\/local\/bin\"\r\n    # Download static proot.\r\n    curl -Ls \"https:\/\/github.com\/ysdragon\/proot-static\/releases\/download\/v${PROOT_VERSION}\/proot-${ARCH}-static\" -o \"$ROOTFS_DIR\/usr\/local\/bin\/proot\"\r\n    # Make PRoot executable.\r\n    chmod 755 \"$ROOTFS_DIR\/usr\/local\/bin\/proot\"\r\nfi\r\n\r\n# Clean-up after installation complete & finish up.\r\nif [ ! -e \"$ROOTFS_DIR\/.installed\" ]; then\r\n    # Add DNS Resolver nameservers to resolv.conf.\r\n    printf \"nameserver 1.1.1.1\\nnameserver 1.0.0.1\" > \"${ROOTFS_DIR}\/etc\/resolv.conf\"\r\n    # Wipe the files we downloaded into \/tmp previously.\r\n    rm -rf $ROOTFS_DIR\/rootfs.tar.xz \/tmp\/sbin\r\n    # Create .installed to later check whether OS is installed.\r\n    touch \"$ROOTFS_DIR\/.installed\"\r\nfi\r\n\r\n###########################\r\n# Start PRoot environment #\r\n###########################\r\n\r\n# Get all ports from vps.config\r\nport_args=\"\"\r\nwhile read line; do\r\n    case \"$line\" in\r\n        internalip=*) ;;\r\n        port[0-9]*=*) port=${line#*=}; if [ -n \"$port\" ]; then port_args=\" -p $port:$port$port_args\"; fi;;\r\n        port=*) port=${line#*=}; if [ -n \"$port\" ]; then port_args=\" -p $port:$port$port_args\"; fi;;\r\n    esac\r\ndone < \"$ROOTFS_DIR\/vps.config\"\r\n\r\n# This command starts PRoot and binds several important directories\r\n# from the host file system to our special root file system.\r\n\"$ROOTFS_DIR\/usr\/local\/bin\/proot\" \\\r\n--rootfs=\"${ROOTFS_DIR}\" \\\r\n-0 -w \"\/root\" -b \/dev -b \/sys -b \/proc -b \/etc\/resolv.conf $port_args --kill-on-exit \\\r\n\/bin\/sh \"\/run.sh\"",
            "container": "quay.io\/rd105291\/pterodactyl-vps-egg",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "PORT 2",
            "description": "",
            "env_variable": "port2",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        },
        {
            "name": "PORT 3",
            "description": "",
            "env_variable": "port3",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        },
        {
            "name": "PORT 4",
            "description": "",
            "env_variable": "port4",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        },
        {
            "name": "PORT 5",
            "description": "",
            "env_variable": "port5",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        },
        {
            "name": "PORT 6",
            "description": "",
            "env_variable": "port6",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        },
        {
            "name": "PORT 7",
            "description": "",
            "env_variable": "port7",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        },
        {
            "name": "PORT 8",
            "description": "",
            "env_variable": "port8",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        },
        {
            "name": "PORT 9",
            "description": "",
            "env_variable": "port9",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        },
        {
            "name": "PORT 10",
            "description": "",
            "env_variable": "port10",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        },
        {
            "name": "PORT 11",
            "description": "",
            "env_variable": "port11",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        },
        {
            "name": "PORT 12",
            "description": "",
            "env_variable": "port12",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        },
        {
            "name": "PORT 13",
            "description": "",
            "env_variable": "port13",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        },
        {
            "name": "PORT 14",
            "description": "",
            "env_variable": "port14",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        },
        {
            "name": "PORT 15",
            "description": "",
            "env_variable": "port15",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        },
        {
            "name": "PORT 16",
            "description": "",
            "env_variable": "port16",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        },
        {
            "name": "PORT 17",
            "description": "",
            "env_variable": "port17",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        },
        {
            "name": "PORT 18",
            "description": "",
            "env_variable": "port18",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        },
        {
            "name": "PORT 19",
            "description": "",
            "env_variable": "port19",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        },
        {
            "name": "PORT 20",
            "description": "",
            "env_variable": "port20",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:5",
            "field_type": "text"
        }
    ]
}
